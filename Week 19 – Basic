CREATE OR REPLACE SCHEMA CHALLENGE_19;


CREATE OR REPLACE TABLE MY_DATE_DIMENSION (
   MY_DATE          DATE        NOT NULL,
   YEAR             SMALLINT    NOT NULL,
   MONTH            SMALLINT    NOT NULL,
   MONTH_NAME       CHAR(3)     NOT NULL,
   MONTH_FULL_NAME  VARCHAR(20) NOT NULL,  -- Added full month name column
   DAY_OF_MON       SMALLINT    NOT NULL,
   DAY_OF_WEEK      VARCHAR(9)  NOT NULL,  -- Adjusted to consider Monday as start of the week
   WEEK_OF_YEAR     SMALLINT    NOT NULL,
   DAY_OF_YEAR      SMALLINT    NOT NULL
)
AS
  WITH CTE_MY_DATE AS (
    SELECT DATEADD(DAY, SEQ4(), '2000-01-01') AS MY_DATE
      FROM TABLE(GENERATOR(ROWCOUNT=>10000))  -- Number of days after reference date in previous line
  )
  SELECT MY_DATE
        ,YEAR(MY_DATE) AS YEAR
        ,MONTH(MY_DATE) AS MONTH
        ,LEFT(TO_CHAR(MY_DATE, 'MON'), 3) AS MONTH_NAME
        ,TO_CHAR(MY_DATE, 'MMMM') AS MONTH_FULL_NAME  -- Ensure correct full month name extraction
        ,DAY(MY_DATE) AS DAY_OF_MON
        ,CASE WHEN DAYOFWEEK(MY_DATE) = 0 THEN 7 ELSE DAYOFWEEK(MY_DATE) END AS DAY_OF_WEEK  -- Adjusting Sunday from 0 to 7, making Monday 1
        ,WEEKOFYEAR(MY_DATE) AS WEEK_OF_YEAR
        ,DAYOFYEAR(MY_DATE) AS DAY_OF_YEAR
    FROM CTE_MY_DATE
;

select * from my_date_dimension;


-- METHOD 1: NOT USING THE DATE DIMENSION


CREATE OR REPLACE FUNCTION calculate_business_days(start_date DATE, end_date DATE, include_end BOOLEAN)
RETURNS INTEGER
AS
$$
WITH date_range AS (
    SELECT 
        start_date,
        IFF(include_end, end_date, DATEADD(day, -1, end_date)) AS adjusted_end_date
),
weekend_days AS (
    SELECT 
        DATEDIFF(week, start_date, adjusted_end_date) * 2 
        + IFF(DAYOFWEEK(start_date) = 7, 1, 0) 
        + IFF(DAYOFWEEK(adjusted_end_date) = 6 AND include_end, 1, 0) AS weekends
    FROM date_range
)
SELECT 
    DATEDIFF(day, start_date, adjusted_end_date) + 1 - weekends
FROM date_range, weekend_days
$$;

SELECT calculate_business_days('2020-11-02', '2020-11-06', TRUE) AS including,  -- Including the end date
       calculate_business_days('2020-11-02', '2020-11-06', FALSE) AS excluding; -- Excluding the end date

-- METHOD 2: USING THE DATE DIMENSION

CREATE OR REPLACE FUNCTION calculate_business_days(start_date DATE, end_date DATE, include_end BOOLEAN)
RETURNS INTEGER
AS
$$
SELECT COUNT(*)
FROM MY_DATE_DIMENSION
WHERE
    MY_DATE BETWEEN start_date AND IFF(include_end, end_date, DATEADD(day, -1, end_date))
    AND DAY_OF_WEEK NOT IN ('Saturday', 'Sunday')  -- Assumes DAY_OF_WEEK stores day names and excludes weekends
$$;
